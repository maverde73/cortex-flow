{
  "name": "database_query_smart_v2",
  "version": "2.0",
  "description": "Optimized smart database query workflow using MCP batch requests and built-in prompts",
  "trigger_patterns": [
    "database query",
    "query database",
    "search database",
    "find in database",
    "list employees",
    "show data",
    "how many",
    "count"
  ],
  "nodes": [
    {
      "id": "get_welcome",
      "agent": "mcp_resource",
      "resource_uri": "welcome://message",
      "server_name": "database-query-server-railway",
      "instruction": "Read welcome resource to get available tables, features, and common rules",
      "depends_on": [],
      "timeout": 30
    },
    {
      "id": "generate_query",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "deepseek/deepseek-v3.2-exp",
        "temperature": 0.1,
        "max_tokens": 2000,
        "system_prompt": "You are a SQL query expert. Generate JSON database queries following exact format specifications. When you need detailed schema information, request it using the available tools. Output ONLY valid JSON with no markdown wrappers.",
        "include_workflow_history": true,
        "history_nodes": ["check_result"]
      },
      "instruction": "You are generating a JSON database query based on the user's natural language request.\n\n## User Request\n{user_input}\n\n## Available Context\n\n### Welcome Message (Tables, Features, Rules)\n{get_welcome}\n\n### Previous Error Analysis (if this is a retry)\n{@latest:check_result}\n\n## Your Task\n\n**IF THIS IS A RETRY** (you see error analysis above with 'has_error: true'):\n- Analyze the error message and hint carefully\n- The hint will tell you EXACTLY what to fix\n- Generate a CORRECTED query addressing the specific issue\n\n**IF THIS IS THE FIRST ATTEMPT** (no error analysis above):\n\n1. **Analyze the Request**: What tables, columns, and operations are needed?\n\n2. **Determine If You Need Details**: If you need exact schema or feature documentation, you can request:\n   - get_table_details(\"Person,Customer,Contract\") - batch request for multiple tables\n   - get_feature_details(\"JOIN,WHERE,GROUP_BY\") - batch request for features\n   \n   NOTE: These are conceptual - in actual implementation, you'll include this need in your reasoning and the system will provide the details.\n\n3. **Generate the Query**:\n\n## Query Format\n\nOutput ONLY the JSON query string (NOT wrapped in {\"json_query\": ...}).\n\n**Basic Structure**:\n{\"table\":\"TableName\",\"select\":[\"column1\",\"column2\"],\"where\":{\"column\":\"value\"},\"limit\":10}\n\n**Common Operations**:\n- WHERE: \"where\": {\"status\": \"active\"}\n- WHERE IN: \"whereIn\": {\"id\": [1, 2, 3]}\n- LIKE: \"whereLike\": {\"name\": \"%pattern%\"}\n- JOIN: \"join\": [{\"table\": \"Other\", \"first\": \"t1.id\", \"second\": \"t2.t1_id\"}]\n- GROUP BY: \"groupBy\": \"category\"\n- COUNT: \"count\": \"*\" or \"count\": \"column_name\"\n- ORDER BY: \"orderBy\": {\"column\": \"asc\"}\n\n**Critical Rules**:\n- Use EXACT table and column names from schema (case-sensitive!)\n- ALWAYS include LIMIT for queries that might return many rows (default: 10-50)\n- JOIN syntax requires exact column references: \"table.column\"\n- Only SELECT operations allowed\n\n## MCP Validation\n\nThe database will validate:\n- Table names exist and are correctly cased\n- Column names exist in their tables\n- Join relationships are valid\n- Feature syntax is correct\n\nIf validation fails, you'll receive a hint explaining exactly what to fix.\n\nGenerate the JSON query now (no wrapper, no markdown):",
      "depends_on": ["get_welcome"],
      "timeout": 120
    },
    {
      "id": "execute_query",
      "agent": "mcp_tool",
      "tool_name": "execute_query",
      "server_name": "database-query-server-railway",
      "instruction": "{generate_query}",
      "depends_on": ["generate_query"],
      "timeout": 60
    },
    {
      "id": "check_result",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "deepseek/deepseek-v3.2-exp",
        "temperature": 0.0,
        "system_prompt": "You are a precise JSON response analyzer. Parse MCP responses and output EXACT structured status information following the specified format."
      },
      "instruction": "Analyze the MCP query execution result and determine if it succeeded or failed.\n\n## Result from MCP\n{execute_query}\n\n## MCP Response Format\n\nThe MCP server returns JSON in one of two formats:\n\n**Success**: {\"success\": true, \"count\": N, \"data\": [...]}\n**Error**: {\"success\": false, \"error\": {\"message\": \"...\", \"details\": \"...\", \"hint\": \"...\"}}\n\n## Your Task\n\n1. Parse the JSON response\n2. Check the \"success\" field\n3. Extract error details if present\n4. Categorize the error type\n5. Extract the hint (CRITICAL for retry)\n\n## Output Format (STRICT - Used for Conditional Routing)\n\n**If Error Detected**:\nhas_error: true\nerror_type: <table_not_found|column_not_found|syntax_error|join_error|type_mismatch|other>\nerror_message: <exact error text from MCP>\nerror_hint: <exact hint from MCP>\n\n**If Successful**:\nhas_error: false\nrow_count: <number of rows returned>\ndata_summary: <brief description>\n\n**IMPORTANT**: The \"has_error\" field MUST be exactly \"true\" or \"false\". This controls workflow routing.\n\nOutput your analysis now:",
      "depends_on": ["execute_query"],
      "timeout": 30
    },
    {
      "id": "format_results",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "deepseek/deepseek-v3.2-exp",
        "temperature": 0.7,
        "max_tokens": 2000,
        "system_prompt": "You are a technical writer. Format database query results in clear, user-friendly prose. Be conversational and helpful."
      },
      "instruction": "Format the successful database query results for the user.\n\n## Original User Request\n{user_input}\n\n## Query Executed\n{generate_query}\n\n## Results from Database (may be truncated)\n{execute_query}\n\n## Your Task\n\nCreate a clear, professional response that:\n1. Directly answers the user's question\n2. Presents data in readable format (tables, lists, or prose)\n3. Highlights key insights if relevant\n4. Uses conversational, helpful tone\n\n**Do NOT include**: Technical query details, JSON syntax, debugging info\n\n## Format Examples\n\n**List queries**: Use markdown tables\n**Count queries**: Use bold numbers with context\n**Analytical queries**: Use bullet lists with insights\n\nGenerate your response now:",
      "depends_on": ["check_result"],
      "timeout": 60
    }
  ],
  "conditional_edges": [
    {
      "from_node": "check_result",
      "conditions": [
        {
          "field": "custom_metadata.has_error",
          "operator": "equals",
          "value": false,
          "next_node": "format_results"
        }
      ],
      "default": "generate_query"
    }
  ],
  "parameters": {
    "user_input": "List all active employees",
    "max_retries": 5
  }
}
