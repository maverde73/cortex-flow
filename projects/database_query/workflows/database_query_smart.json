{
  "name": "database_query_smart",
  "version": "2.0",
  "description": "Smart database query workflow with dynamic schema discovery via MCP resources and intelligent error retry",
  "trigger_patterns": [
    "database query",
    "query database",
    "search database",
    "find in database",
    "list employees",
    "show data"
  ],
  "nodes": [
    {
      "id": "get_welcome",
      "agent": "mcp_resource",
      "resource_uri": "welcome://message",
      "server_name": "database-query-server-railway",
      "instruction": "Read welcome resource to get available tables",
      "depends_on": [],
      "timeout": 30
    },
    {
      "id": "extract_tables",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "meta-llama/llama-3.3-8b-instruct:free",
        "temperature": 0.2,
        "system_prompt": "You are a data extraction specialist. Output ONLY the requested data with no explanations or markdown."
      },
      "instruction": "Extract the list of available table names from the MCP server welcome message.\n\nWelcome message:\n{get_welcome}\n\nYour task:\n1. Find the section listing available tables\n2. Extract ONLY the table names (comma-separated)\n3. Output ONLY the comma-separated list, no explanations\n\nExample output format:\nemployees,departments,projects,certifications,assessments,skills\n\nProvide ONLY the table names list:",
      "depends_on": ["get_welcome"],
      "timeout": 30
    },
    {
      "id": "get_schema",
      "agent": "mcp_tool",
      "tool_name": "get_table_details",
      "server_name": "database-query-server-railway",
      "instruction": "{\"table_names\": \"{extract_tables}\"}",
      "depends_on": ["extract_tables"],
      "timeout": 30
    },
    {
      "id": "generate_query",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "meta-llama/llama-3.3-8b-instruct:free",
        "temperature": 0.1,
        "max_tokens": 2000,
        "system_prompt": "You are a SQL query expert. Convert natural language requests to JSON query format. Output ONLY valid JSON with no markdown, explanations, or wrappers.",
        "include_workflow_history": true,
        "history_nodes": ["check_result"]
      },
      "instruction": "Convert the natural language request into a JSON database query using the schema provided by the MCP server.\n\nUser request: {user_input}\n\n## Database Schema (from MCP)\n{get_schema}\n\n## Previous Error Analysis (if this is a retry)\n{@latest:check_result}\n\nIMPORTANT: If you see error analysis above with 'has_error: true', this is a RETRY. Analyze the error carefully and generate a CORRECTED query that fixes the specific issue. If no error analysis is present, this is the first attempt - generate the query from scratch.\n\n## JSON Query Format\n\nOutput ONLY the JSON query string (NOT wrapped in {\"json_query\": ...}).\n\nThe query should be a JSON string like this:\n{\"table\":\"TABLE_NAME\",\"select\":[\"field1\",\"field2\"],\"where\":{...}}\n\n## Important Rules:\n1. Output ONLY the JSON query string (no wrapper, no markdown)\n2. Use EXACT table and column names from the schema above\n3. Common operations:\n   - WHERE: \"where\": {\"field\": \"value\"}\n   - IN: \"whereIn\": {\"field\": [\"val1\", \"val2\"]}\n   - LIKE: \"whereLike\": {\"field\": \"pattern%\"}\n   - JOIN: \"join\": [{\"table\": \"other\", \"first\": \"t1.col\", \"second\": \"t2.col\"}]\n   - GROUP BY: \"groupBy\": \"field\"\n   - COUNT: \"count\": \"*\"\n4. Only SELECT operations (no INSERT/UPDATE/DELETE)\n\n## Examples\n\nList all active employees:\n{\"table\":\"employees\",\"select\":[\"*\"],\"where\":{\"is_active\":true}}\n\nEmployees with department names:\n{\"table\":\"employees\",\"select\":[\"employees.first_name\",\"employees.last_name\",\"departments.department_name\"],\"join\":[{\"table\":\"departments\",\"first\":\"employees.department_id\",\"second\":\"departments.id\"}]}\n\nGenerate ONLY the JSON query string (no wrapper):",
      "depends_on": ["get_schema"],
      "timeout": 120
    },
    {
      "id": "execute_query",
      "agent": "mcp_tool",
      "tool_name": "execute_query",
      "server_name": "database-query-server-railway",
      "instruction": "{generate_query}",
      "depends_on": ["generate_query"],
      "timeout": 60
    },
    {
      "id": "check_result",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "meta-llama/llama-3.3-8b-instruct:free",
        "temperature": 0.0,
        "system_prompt": "You are a JSON response analyzer. Parse MCP responses and output structured status information. Be precise and follow the exact format requested."
      },
      "instruction": "Analyze the MCP query result and determine if it succeeded or failed.\n\nResult from MCP:\n{execute_query}\n\nThe MCP server returns JSON in this format:\n- Success: {\"success\": true, \"count\": N, \"data\": [...]}\n- Error: {\"success\": false, \"error\": {\"message\": \"...\", \"hint\": \"...\"}}\n\nYour task:\n1. Parse the JSON response\n2. Check if \"success\" is true or false\n3. If ERROR: Extract the exact error message and hint\n4. If SUCCESS: Confirm data was returned\n\nOutput format (STRICT - used for conditional routing):\n\nIf error found:\nhas_error: true\nerror_type: <table_not_found|column_not_found|syntax_error|join_error|other>\nerror_message: <exact error text from MCP>\nerror_hint: <hint from MCP if available>\n\nIf successful:\nhas_error: false\nrow_count: <number of rows returned>\n\nBe precise - the 'has_error' field controls whether we retry or proceed to formatting.",
      "depends_on": ["execute_query"],
      "timeout": 30
    },
    {
      "id": "format_results",
      "agent": "llm",
      "llm_config": {
        "provider": "openrouter",
        "model": "meta-llama/llama-3.3-8b-instruct:free",
        "temperature": 0.7,
        "max_tokens": 2000,
        "system_prompt": "You are a technical writer. Format database query results in clear, user-friendly prose. Be conversational and helpful while presenting data professionally."
      },
      "instruction": "Format the successful database query results for the user.\n\nOriginal request: {user_input}\n\nQuery executed:\n{generate_query}\n\nResults from database:\n{execute_query}\n\nCreate a clear, professional response that:\n1. Directly answers the user's question\n2. Presents the data in a readable format:\n   - Use tables for structured data (multiple rows)\n   - Use bullet lists for small sets\n   - Use prose for single values or summaries\n3. Highlights key insights or patterns if relevant\n4. Is conversational and helpful\n\nDO NOT include technical details about the query unless specifically requested.\nFocus on delivering the information the user asked for in a natural, easy-to-understand way.",
      "depends_on": ["check_result"],
      "timeout": 60
    }
  ],
  "conditional_edges": [
    {
      "from_node": "check_result",
      "conditions": [
        {
          "field": "custom_metadata.has_error",
          "operator": "equals",
          "value": false,
          "next_node": "format_results"
        }
      ],
      "default": "generate_query"
    }
  ],
  "parameters": {
    "user_input": "List all active employees"
  }
}
